/* tslint:disable */
/* eslint-disable */
/**
 * Muisti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExhibitionDeviceGroup,
    ExhibitionDeviceGroupFromJSON,
    ExhibitionDeviceGroupToJSON,
} from '../models';

export interface CreateExhibitionDeviceGroupRequest {
    exhibitionDeviceGroup: ExhibitionDeviceGroup;
    exhibitionId: string;
}

export interface DeleteExhibitionDeviceGroupRequest {
    exhibitionId: string;
    deviceGroupId: string;
}

export interface FindExhibitionDeviceGroupRequest {
    exhibitionId: string;
    deviceGroupId: string;
}

export interface ListExhibitionDeviceGroupsRequest {
    exhibitionId: string;
}

export interface UpdateExhibitionDeviceGroupRequest {
    exhibitionDeviceGroup: ExhibitionDeviceGroup;
    exhibitionId: string;
    deviceGroupId: string;
}

/**
 * no description
 */
export class ExhibitionDeviceGroupsApi extends runtime.BaseAPI {

    /**
     * Creates new exhibition device group
     * Create a device group
     */
    async createExhibitionDeviceGroupRaw(requestParameters: CreateExhibitionDeviceGroupRequest): Promise<runtime.ApiResponse<ExhibitionDeviceGroup>> {
        if (requestParameters.exhibitionDeviceGroup === null || requestParameters.exhibitionDeviceGroup === undefined) {
            throw new runtime.RequiredError('exhibitionDeviceGroup','Required parameter requestParameters.exhibitionDeviceGroup was null or undefined when calling createExhibitionDeviceGroup.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling createExhibitionDeviceGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceGroups`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExhibitionDeviceGroupToJSON(requestParameters.exhibitionDeviceGroup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionDeviceGroupFromJSON(jsonValue));
    }

    /**
     * Creates new exhibition device group
     * Create a device group
     */
    async createExhibitionDeviceGroup(requestParameters: CreateExhibitionDeviceGroupRequest): Promise<ExhibitionDeviceGroup> {
        const response = await this.createExhibitionDeviceGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delets exhibition device group.
     * Deletes device group.
     */
    async deleteExhibitionDeviceGroupRaw(requestParameters: DeleteExhibitionDeviceGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling deleteExhibitionDeviceGroup.');
        }

        if (requestParameters.deviceGroupId === null || requestParameters.deviceGroupId === undefined) {
            throw new runtime.RequiredError('deviceGroupId','Required parameter requestParameters.deviceGroupId was null or undefined when calling deleteExhibitionDeviceGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceGroups/{deviceGroupId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"deviceGroupId"}}`, encodeURIComponent(String(requestParameters.deviceGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delets exhibition device group.
     * Deletes device group.
     */
    async deleteExhibitionDeviceGroup(requestParameters: DeleteExhibitionDeviceGroupRequest): Promise<void> {
        await this.deleteExhibitionDeviceGroupRaw(requestParameters);
    }

    /**
     * Finds a device group by id
     * Find a device group
     */
    async findExhibitionDeviceGroupRaw(requestParameters: FindExhibitionDeviceGroupRequest): Promise<runtime.ApiResponse<ExhibitionDeviceGroup>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling findExhibitionDeviceGroup.');
        }

        if (requestParameters.deviceGroupId === null || requestParameters.deviceGroupId === undefined) {
            throw new runtime.RequiredError('deviceGroupId','Required parameter requestParameters.deviceGroupId was null or undefined when calling findExhibitionDeviceGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceGroups/{deviceGroupId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"deviceGroupId"}}`, encodeURIComponent(String(requestParameters.deviceGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionDeviceGroupFromJSON(jsonValue));
    }

    /**
     * Finds a device group by id
     * Find a device group
     */
    async findExhibitionDeviceGroup(requestParameters: FindExhibitionDeviceGroupRequest): Promise<ExhibitionDeviceGroup> {
        const response = await this.findExhibitionDeviceGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * List exhibition device groups
     * List device groups
     */
    async listExhibitionDeviceGroupsRaw(requestParameters: ListExhibitionDeviceGroupsRequest): Promise<runtime.ApiResponse<Array<ExhibitionDeviceGroup>>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling listExhibitionDeviceGroups.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceGroups`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExhibitionDeviceGroupFromJSON));
    }

    /**
     * List exhibition device groups
     * List device groups
     */
    async listExhibitionDeviceGroups(requestParameters: ListExhibitionDeviceGroupsRequest): Promise<Array<ExhibitionDeviceGroup>> {
        const response = await this.listExhibitionDeviceGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates device group.
     * Updates device group.
     */
    async updateExhibitionDeviceGroupRaw(requestParameters: UpdateExhibitionDeviceGroupRequest): Promise<runtime.ApiResponse<ExhibitionDeviceGroup>> {
        if (requestParameters.exhibitionDeviceGroup === null || requestParameters.exhibitionDeviceGroup === undefined) {
            throw new runtime.RequiredError('exhibitionDeviceGroup','Required parameter requestParameters.exhibitionDeviceGroup was null or undefined when calling updateExhibitionDeviceGroup.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling updateExhibitionDeviceGroup.');
        }

        if (requestParameters.deviceGroupId === null || requestParameters.deviceGroupId === undefined) {
            throw new runtime.RequiredError('deviceGroupId','Required parameter requestParameters.deviceGroupId was null or undefined when calling updateExhibitionDeviceGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceGroups/{deviceGroupId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"deviceGroupId"}}`, encodeURIComponent(String(requestParameters.deviceGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExhibitionDeviceGroupToJSON(requestParameters.exhibitionDeviceGroup),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionDeviceGroupFromJSON(jsonValue));
    }

    /**
     * Updates device group.
     * Updates device group.
     */
    async updateExhibitionDeviceGroup(requestParameters: UpdateExhibitionDeviceGroupRequest): Promise<ExhibitionDeviceGroup> {
        const response = await this.updateExhibitionDeviceGroupRaw(requestParameters);
        return await response.value();
    }

}
