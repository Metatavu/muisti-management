/* tslint:disable */
/* eslint-disable */
/**
 * Muisti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    VisitorSession,
    VisitorSessionFromJSON,
    VisitorSessionToJSON,
    VisitorSessionV2,
    VisitorSessionV2FromJSON,
    VisitorSessionV2ToJSON,
} from '../models';

export interface CreateVisitorSessionRequest {
    visitorSession: VisitorSession;
    exhibitionId: string;
}

export interface CreateVisitorSessionV2Request {
    visitorSessionV2: VisitorSessionV2;
    exhibitionId: string;
}

export interface DeleteVisitorSessionRequest {
    exhibitionId: string;
    visitorSessionId: string;
}

export interface DeleteVisitorSessionV2Request {
    exhibitionId: string;
    visitorSessionId: string;
}

export interface FindVisitorSessionRequest {
    exhibitionId: string;
    visitorSessionId: string;
}

export interface FindVisitorSessionV2Request {
    exhibitionId: string;
    visitorSessionId: string;
}

export interface ListVisitorSessionsRequest {
    exhibitionId: string;
    tagId?: string;
}

export interface ListVisitorSessionsV2Request {
    exhibitionId: string;
    tagId?: string;
    modifiedAfter?: string;
}

export interface UpdateVisitorSessionRequest {
    visitorSession: VisitorSession;
    exhibitionId: string;
    visitorSessionId: string;
}

export interface UpdateVisitorSessionV2Request {
    visitorSessionV2: VisitorSessionV2;
    exhibitionId: string;
    visitorSessionId: string;
}

/**
 * no description
 */
export class VisitorSessionsApi extends runtime.BaseAPI {

    /**
     * Creates new exhibition visitor session
     * Create a visitor session
     */
    async createVisitorSessionRaw(requestParameters: CreateVisitorSessionRequest): Promise<runtime.ApiResponse<VisitorSession>> {
        if (requestParameters.visitorSession === null || requestParameters.visitorSession === undefined) {
            throw new runtime.RequiredError('visitorSession','Required parameter requestParameters.visitorSession was null or undefined when calling createVisitorSession.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling createVisitorSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exhibitions/{exhibitionId}/visitorSessions`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VisitorSessionToJSON(requestParameters.visitorSession),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VisitorSessionFromJSON(jsonValue));
    }

    /**
     * Creates new exhibition visitor session
     * Create a visitor session
     */
    async createVisitorSession(requestParameters: CreateVisitorSessionRequest): Promise<VisitorSession> {
        const response = await this.createVisitorSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates new exhibition visitor session
     * Create a visitor session
     */
    async createVisitorSessionV2Raw(requestParameters: CreateVisitorSessionV2Request): Promise<runtime.ApiResponse<VisitorSessionV2>> {
        if (requestParameters.visitorSessionV2 === null || requestParameters.visitorSessionV2 === undefined) {
            throw new runtime.RequiredError('visitorSessionV2','Required parameter requestParameters.visitorSessionV2 was null or undefined when calling createVisitorSessionV2.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling createVisitorSessionV2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/exhibitions/{exhibitionId}/visitorSessions`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VisitorSessionV2ToJSON(requestParameters.visitorSessionV2),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VisitorSessionV2FromJSON(jsonValue));
    }

    /**
     * Creates new exhibition visitor session
     * Create a visitor session
     */
    async createVisitorSessionV2(requestParameters: CreateVisitorSessionV2Request): Promise<VisitorSessionV2> {
        const response = await this.createVisitorSessionV2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Delets exhibition visitor session.
     * Deletes visitor session.
     */
    async deleteVisitorSessionRaw(requestParameters: DeleteVisitorSessionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling deleteVisitorSession.');
        }

        if (requestParameters.visitorSessionId === null || requestParameters.visitorSessionId === undefined) {
            throw new runtime.RequiredError('visitorSessionId','Required parameter requestParameters.visitorSessionId was null or undefined when calling deleteVisitorSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"visitorSessionId"}}`, encodeURIComponent(String(requestParameters.visitorSessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delets exhibition visitor session.
     * Deletes visitor session.
     */
    async deleteVisitorSession(requestParameters: DeleteVisitorSessionRequest): Promise<void> {
        await this.deleteVisitorSessionRaw(requestParameters);
    }

    /**
     * Delets exhibition visitor session.
     * Deletes visitor session.
     */
    async deleteVisitorSessionV2Raw(requestParameters: DeleteVisitorSessionV2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling deleteVisitorSessionV2.');
        }

        if (requestParameters.visitorSessionId === null || requestParameters.visitorSessionId === undefined) {
            throw new runtime.RequiredError('visitorSessionId','Required parameter requestParameters.visitorSessionId was null or undefined when calling deleteVisitorSessionV2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"visitorSessionId"}}`, encodeURIComponent(String(requestParameters.visitorSessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delets exhibition visitor session.
     * Deletes visitor session.
     */
    async deleteVisitorSessionV2(requestParameters: DeleteVisitorSessionV2Request): Promise<void> {
        await this.deleteVisitorSessionV2Raw(requestParameters);
    }

    /**
     * Finds a visitor session by id
     * Find a visitor session
     */
    async findVisitorSessionRaw(requestParameters: FindVisitorSessionRequest): Promise<runtime.ApiResponse<VisitorSession>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling findVisitorSession.');
        }

        if (requestParameters.visitorSessionId === null || requestParameters.visitorSessionId === undefined) {
            throw new runtime.RequiredError('visitorSessionId','Required parameter requestParameters.visitorSessionId was null or undefined when calling findVisitorSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"visitorSessionId"}}`, encodeURIComponent(String(requestParameters.visitorSessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VisitorSessionFromJSON(jsonValue));
    }

    /**
     * Finds a visitor session by id
     * Find a visitor session
     */
    async findVisitorSession(requestParameters: FindVisitorSessionRequest): Promise<VisitorSession> {
        const response = await this.findVisitorSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a visitor session by id
     * Find a visitor session
     */
    async findVisitorSessionV2Raw(requestParameters: FindVisitorSessionV2Request): Promise<runtime.ApiResponse<VisitorSessionV2>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling findVisitorSessionV2.');
        }

        if (requestParameters.visitorSessionId === null || requestParameters.visitorSessionId === undefined) {
            throw new runtime.RequiredError('visitorSessionId','Required parameter requestParameters.visitorSessionId was null or undefined when calling findVisitorSessionV2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"visitorSessionId"}}`, encodeURIComponent(String(requestParameters.visitorSessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VisitorSessionV2FromJSON(jsonValue));
    }

    /**
     * Finds a visitor session by id
     * Find a visitor session
     */
    async findVisitorSessionV2(requestParameters: FindVisitorSessionV2Request): Promise<VisitorSessionV2> {
        const response = await this.findVisitorSessionV2Raw(requestParameters);
        return await response.value();
    }

    /**
     * List exhibition visitor sessions
     * List visitor sessions
     */
    async listVisitorSessionsRaw(requestParameters: ListVisitorSessionsRequest): Promise<runtime.ApiResponse<Array<VisitorSession>>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling listVisitorSessions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exhibitions/{exhibitionId}/visitorSessions`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisitorSessionFromJSON));
    }

    /**
     * List exhibition visitor sessions
     * List visitor sessions
     */
    async listVisitorSessions(requestParameters: ListVisitorSessionsRequest): Promise<Array<VisitorSession>> {
        const response = await this.listVisitorSessionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List exhibition visitor sessions
     * List visitor sessions
     */
    async listVisitorSessionsV2Raw(requestParameters: ListVisitorSessionsV2Request): Promise<runtime.ApiResponse<Array<VisitorSessionV2>>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling listVisitorSessionsV2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tagId !== undefined) {
            queryParameters['tagId'] = requestParameters.tagId;
        }

        if (requestParameters.modifiedAfter !== undefined) {
            queryParameters['modifiedAfter'] = requestParameters.modifiedAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/exhibitions/{exhibitionId}/visitorSessions`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VisitorSessionV2FromJSON));
    }

    /**
     * List exhibition visitor sessions
     * List visitor sessions
     */
    async listVisitorSessionsV2(requestParameters: ListVisitorSessionsV2Request): Promise<Array<VisitorSessionV2>> {
        const response = await this.listVisitorSessionsV2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Updates visitor session.
     * Updates visitor session.
     */
    async updateVisitorSessionRaw(requestParameters: UpdateVisitorSessionRequest): Promise<runtime.ApiResponse<VisitorSession>> {
        if (requestParameters.visitorSession === null || requestParameters.visitorSession === undefined) {
            throw new runtime.RequiredError('visitorSession','Required parameter requestParameters.visitorSession was null or undefined when calling updateVisitorSession.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling updateVisitorSession.');
        }

        if (requestParameters.visitorSessionId === null || requestParameters.visitorSessionId === undefined) {
            throw new runtime.RequiredError('visitorSessionId','Required parameter requestParameters.visitorSessionId was null or undefined when calling updateVisitorSession.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"visitorSessionId"}}`, encodeURIComponent(String(requestParameters.visitorSessionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VisitorSessionToJSON(requestParameters.visitorSession),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VisitorSessionFromJSON(jsonValue));
    }

    /**
     * Updates visitor session.
     * Updates visitor session.
     */
    async updateVisitorSession(requestParameters: UpdateVisitorSessionRequest): Promise<VisitorSession> {
        const response = await this.updateVisitorSessionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates visitor session.
     * Updates visitor session.
     */
    async updateVisitorSessionV2Raw(requestParameters: UpdateVisitorSessionV2Request): Promise<runtime.ApiResponse<VisitorSessionV2>> {
        if (requestParameters.visitorSessionV2 === null || requestParameters.visitorSessionV2 === undefined) {
            throw new runtime.RequiredError('visitorSessionV2','Required parameter requestParameters.visitorSessionV2 was null or undefined when calling updateVisitorSessionV2.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling updateVisitorSessionV2.');
        }

        if (requestParameters.visitorSessionId === null || requestParameters.visitorSessionId === undefined) {
            throw new runtime.RequiredError('visitorSessionId','Required parameter requestParameters.visitorSessionId was null or undefined when calling updateVisitorSessionV2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v2/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"visitorSessionId"}}`, encodeURIComponent(String(requestParameters.visitorSessionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VisitorSessionV2ToJSON(requestParameters.visitorSessionV2),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VisitorSessionV2FromJSON(jsonValue));
    }

    /**
     * Updates visitor session.
     * Updates visitor session.
     */
    async updateVisitorSessionV2(requestParameters: UpdateVisitorSessionV2Request): Promise<VisitorSessionV2> {
        const response = await this.updateVisitorSessionV2Raw(requestParameters);
        return await response.value();
    }

}
